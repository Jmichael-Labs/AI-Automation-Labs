name: Multi-Platform AI Education Publishing System (12 Channels)

on:
  schedule:
    # 9 AM EST (14:00 UTC) - Morning Professional Focus
    - cron: '0 14 * * *'
    # 3 PM EST (20:00 UTC) - Afternoon Application Focus
    - cron: '0 20 * * *'
    # 8 PM EST (01:00 UTC next day) - Evening Community Focus
    - cron: '0 1 * * *'
  workflow_dispatch: # Manual trigger for testing

jobs:
  multi-platform-publish:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install google-cloud-language requests python-telegram-bot
        
    - name: Configure Google Cloud credentials
      env:
        GOOGLE_APPLICATION_CREDENTIALS_JSON: ${{ secrets.GOOGLE_CLOUD_CREDENTIALS }}
      run: |
        echo "$GOOGLE_APPLICATION_CREDENTIALS_JSON" > /tmp/gcp-key.json
        export GOOGLE_APPLICATION_CREDENTIALS=/tmp/gcp-key.json
        echo "GOOGLE_APPLICATION_CREDENTIALS=/tmp/gcp-key.json" >> $GITHUB_ENV
        
    - name: Multi-Platform Publishing Engine
      env:
        # === TELEGRAM TOKENS (4 industries) ===
        TELEGRAM_LEGAL_TOKEN: ${{ secrets.TELEGRAM_LEGAL_TOKEN }}
        TELEGRAM_MEDICAL_TOKEN: ${{ secrets.TELEGRAM_MEDICAL_TOKEN }}
        TELEGRAM_SENIOR_TOKEN: ${{ secrets.TELEGRAM_SENIOR_TOKEN }}
        TELEGRAM_GENERAL_TOKEN: ${{ secrets.TELEGRAM_GENERAL_TOKEN }}
        
        # === KO-FI API KEYS (4 industries) ===
        KOFI_LEGAL_API: ${{ secrets.KOFI_LEGAL_API }}
        KOFI_MEDICAL_API: ${{ secrets.KOFI_MEDICAL_API }}
        KOFI_SENIOR_API: ${{ secrets.KOFI_SENIOR_API }}
        KOFI_GENERAL_API: ${{ secrets.KOFI_GENERAL_API }}
        
        # === TELEGRAM CHAT ID FOR NOTIFICATIONS ===
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        
        # === GUMROAD API CONFIGURATION ===
        GUMROAD_API_KEY: ${{ secrets.GUMROAD_API_KEY }}
        GUMROAD_LEGAL_ID: ${{ secrets.GUMROAD_LEGAL_ID }}
        GUMROAD_MEDICAL_ID: ${{ secrets.GUMROAD_MEDICAL_ID }}
        GUMROAD_SENIOR_ID: ${{ secrets.GUMROAD_SENIOR_ID }}
        GUMROAD_GENERAL_ID: ${{ secrets.GUMROAD_GENERAL_ID }}
        
        # === GOOGLE CLOUD CONFIGURATION ===
        GOOGLE_APPLICATION_CREDENTIALS: /tmp/gcp-key.json
        GOOGLE_PROJECT_ID: ${{ secrets.GOOGLE_PROJECT_ID }}
        
        # === GENERAL CONFIGURATION ===
        EMAIL_CONTACT: ${{ secrets.EMAIL_CONTACT }}
        INSTAGRAM_CONSULTING: ${{ secrets.INSTAGRAM_CONSULTING }}
        
      run: |
        echo "üöÄ Starting Multi-Platform AI Education Publishing System"
        echo "üìÖ Execution time: $(date)"
        echo "üïê Schedule context: $(date +%H) hours UTC"
        
        echo "üìä Environment Validation:"
        echo "- Telegram Legal: $([ -n "$TELEGRAM_LEGAL_TOKEN" ] && echo "‚úÖ Ready" || echo "‚ùå Missing")"
        echo "- Telegram Medical: $([ -n "$TELEGRAM_MEDICAL_TOKEN" ] && echo "‚úÖ Ready" || echo "‚ùå Missing")"
        echo "- Telegram Senior: $([ -n "$TELEGRAM_SENIOR_TOKEN" ] && echo "‚úÖ Ready" || echo "‚ùå Missing")"
        echo "- Telegram General: $([ -n "$TELEGRAM_GENERAL_TOKEN" ] && echo "‚úÖ Ready" || echo "‚ùå Missing")"
        echo "- Telegram Chat ID: $([ -n "$TELEGRAM_CHAT_ID" ] && echo "‚úÖ Ready" || echo "‚ùå Missing")"
        echo "- Gumroad API: $([ -n "$GUMROAD_API_KEY" ] && echo "‚úÖ Ready" || echo "‚ùå Missing")"
        echo "- Google Cloud: $([ -f "$GOOGLE_APPLICATION_CREDENTIALS" ] && echo "‚úÖ Ready" || echo "‚ùå Missing")"
        
        echo "üîÑ Executing Multi-Platform Content Distribution..."
        
        # Run the multi-platform publishing engine
        python multi_platform_engine.py 2>&1 | tee /tmp/publishing_log.txt || { 
          echo "‚ùå Multi-platform publishing failed with exit code $?"
          echo "üìã Last 20 lines of output:"
          tail -20 /tmp/publishing_log.txt
          exit 1
        }
        
        echo "‚úÖ Multi-platform publishing completed successfully"
        
        # Count successful publications
        SUCCESSFUL_POSTS=$(grep -c "‚úÖ.*published\|‚úÖ.*Posted\|‚úÖ.*sent" /tmp/publishing_log.txt || echo "0")
        echo "üìà Results Summary: $SUCCESSFUL_POSTS successful publications across all platforms"
        
        if [ "$SUCCESSFUL_POSTS" -eq 0 ]; then
          echo "‚ö†Ô∏è Warning: No successful publications detected"
          echo "üìã Full log for debugging:"
          cat /tmp/publishing_log.txt
        fi
        
    - name: Performance Metrics
      if: always()
      run: |
        echo "üìä Workflow Performance Metrics:"
        echo "- Execution time: ${{ job.start-time }} to $(date)"
        echo "- Runner OS: ${{ runner.os }}"
        echo "- Python version: $(python --version)"
        echo "- Memory usage: $(free -h | grep Mem | awk '{print $3 "/" $2}')"
        echo "- Disk usage: $(df -h . | tail -1 | awk '{print $3 "/" $2}')"
        
    - name: Cleanup sensitive files
      if: always()
      run: |
        rm -f /tmp/gcp-key.json
        rm -f /tmp/publishing_log.txt
        echo "üßπ Cleanup completed"
        
    - name: Upload logs (on failure)
      if: failure()
      uses: actions/upload-artifact@v3
      with:
        name: publishing-logs-${{ github.run_id }}
        path: /tmp/publishing_log.txt
        retention-days: 7